(ns day-05)

(def to-int #(Integer/parseInt %))

(defn span [a b]
  (let [step (if (< a b) 1 -1)]
    (if (= a b)
      (repeat a)
      (range a (+ b step) step))))

(defn vent
  "returns a lazy sequence of [x y] coords generated by a vent line"
  [ignore-diagonals line]
  (let [[x0 y0 x1 y1] (map to-int (re-seq #"\d+" line))]
    (when (or (not ignore-diagonals) (= x0 x1) (= y0 y1))
      (map vector (span x0 x1) (span y0 y1)))))

(defn place-vent
  "returns new ocean floor with vents from the vent line added"
  [floor vent-line]
  (reduce
   (fn [acc xy] (update acc xy (fnil inc 0)))
   floor
   vent-line))

(defn run []
  (let [lines  (re-seq #"[^\n]+" (slurp "../day_05.data"))
        score  (fn [floor] (count (filter #(< 1 %) (vals floor))))
        floor1 (reduce place-vent {} (map #(vent true %) lines)) ; floor is map {[x y] <count> ...}
        floor2 (reduce place-vent {} (map #(vent false %) lines))]
    (println "\n-- Part 1 --")
    (println "Number of points with at least two vents:" (score floor1))

    (println "\n-- Part2 --")
    (println "Number of points with at least two vents:" (score floor2))))


(run)

;(defn print-board [floor]
;  (let [max-x (apply max (map first (keys floor)))
;        max-y (apply max (map second (keys floor)))]
;    (doseq [y (range 0 (inc max-y))]
;      (println)
;      (doseq [x (range 0 (inc max-x))]
;        (print (get floor [x y] 0))))
;    (println)))
